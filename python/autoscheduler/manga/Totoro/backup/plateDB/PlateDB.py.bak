#!/usr/bin/env python
# encoding: utf-8
"""
PlateDB.py

Created by José Sánchez-Gallego on 30 Oct 2013.
Copyright (c) 2013. All rights reserved.
Licensed under a 3-clause BSD license.

"""

import os
import psycopg2 as psy
from astropy import table


# APO database configuration parameters
_db_config = {
    'user': 'jrsg',
    'password': '',
    'database': 'apo_platedb',
    'host': 'localhost',
    'port': 5432
}

if 'PLATEDB_USER' in os.environ:
    _db_config['user'] = os.environ['PLATEDB_USER']
if 'PLATEDB_PASSWORD' in os.environ:
    _db_config['password'] = os.environ['PLATEDB_PASSWORD']
if 'PLATEDB_HOST' in os.environ:
    _db_config['host'] = os.environ['PLATEDB_HOST']


class DatabaseConnection(object):

    def __init__(self, connectionString=None):

        if connectionString is None:
            connectionString = 'dbname={0} host={1} user={2} password={3} port={4}'.format(
                _db_config['database'], _db_config['host'], _db_config['user'],
                _db_config['password'], _db_config['port'])

        self.connection = psy.connect(connectionString)
        self.reactivateCursor()

    def close(self):
        self.cursor.close()
        self.connection.close()

    def reactivateCursor(self):
        try:
            self.cursor.close()
        except:
            pass
        self.cursor = self.connection.cursor()

    def tableQuery(self, query, cursor=None, rename=[]):

        if cursor is None:
            cursor = self.cursor
        cursor.execute(query)
        description = cursor.description

        colnames = [description[ii][0] for ii in range(len(description))]
        data = cursor.fetchall()

        if len(rename > 0):
            for old, new in rename:
                colnames[colnames.index(old)] = new

        for ii in range(len(colnames)):
            if colnames[ii] in colnames[0:ii]:
                nn = 1
                while colnames[ii] + '_{0}'.format(nn) in colnames[0:ii]:
                    nn += 1
                colnames[ii] += '_{0}'.format(nn)

        self._lastColnames = colnames
        self._lastData = data
        self._lastTable = table.Table(zip(*data), names=colnames)

        return self._lastTable

    def join(self, table1, table2, schema='platedb', **kwargs):

        query = 'SELECT * FROM {0}.{1}, {0}.{2} WHERE {2}.pk = {1}.{2}_pk;'.format(
            schema, table1, table2)
        return self.tableQuery(query, **kwargs)


    # def getExposures(self, survey=None):

    #     if survey is None:
    #         survey is 'eBOSS'

